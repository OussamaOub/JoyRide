// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_TEST")
}

model User {
  id              String             @id @unique @default(uuid())
  username        String             @unique
  email           String             @unique
  firstName       String
  lastName        String
  password        String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @default(now()) @updatedAt
  role            String?
  rating          Float?
  posts           Post[]
  BookedRides     BookedRides[]
  sessions        Session[]
  issues          Issue[]
  createdMessages Message[]          @relation("sentMessages")
  conversations   ConversationUser[]
}

model Session {
  id        String   @id @unique @default(uuid())
  jwt       String
  userId    String
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Post {
  id                  String   @id @unique @default(uuid())
  authorId            String
  title               String
  description         String   @default("") @db.VarChar(1000)
  published           Boolean  @default(false)
  authorName          String
  createdAt           DateTime @default(now())
  departureLocation   String
  destinationLocation String
  departureDateTime   DateTime
  arrivalDateTime     DateTime
  price               Int
  contactInformation  String   @map("user_email")
  updatedAt           DateTime @updatedAt
  status              String   @default("pending")
  availableSeats      Int      @default(0)

  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookedRides BookedRides[]

  @@map("post")
}

model BookedRides {
  id        String   @id @unique @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  status    String   @default("pending")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  issues    Issue[]

  @@map("bookings")
}

model Issue {
  id        String   @id @unique @default(uuid())
  userId    String
  rideId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ride BookedRides @relation(fields: [rideId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("issue")
}

model Message {
  id             String        @id @default(uuid())
  message        String
  author         User          @relation("sentMessages", fields: [authorId], references: [id])
  authorId       String
  created_at     DateTime      @default(now())
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String?
  isEdited       Boolean       @default(false)

  @@map("message")
}

model Conversation {
  id              String             @id @default(uuid())
  title           String?
  messages        Message[]
  created_at      DateTime           @default(now())
  dateLastMessage DateTime?
  participants    ConversationUser[]

  @@map("conversation")
}

model ConversationUser {
  id             String       @id @default(uuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  isRead         Boolean      @default(true)

  // @@map("conversation_user")
}
